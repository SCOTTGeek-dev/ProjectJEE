import org.springframework.context.annotation.Bean;
import org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.security.crypto.password.PasswordEncoder;

@Configuration
@EnableWebSecurity
public class SecurityConfig extends WebSecurityConfigurerAdapter {

    @Autowired
    private CustomAuthenticationSuccessHandler customAuthenticationSuccessHandler;

    @Override
    protected void configure(HttpSecurity http) throws Exception {
        http
            .authorizeRequests()
                // Autoriser l'accès à toutes les ressources pour les utilisateurs authentifiés
                .antMatchers("/**").authenticated()
                .and()
            .formLogin()
                .loginPage("/login")
                .permitAll()
                .failureUrl("/")
                .successHandler(customAuthenticationSuccessHandler)
                .and()
            .logout()
                .permitAll()
                .and()
            .csrf().disable(); // Désactive CSRF pour les tests
    }

    protected void configure(AuthenticationManagerBuilder auth) throws Exception {
        auth
            .inMemoryAuthentication()
                .withUser("user").password(passwordEncoder().encode("{noop}password")).roles("USER")
                .and()
                .withUser("admin").password(passwordEncoder().encode("{noop}admin")).roles("ADMIN");
    }

    @Bean
    public PasswordEncoder passwordEncoder() {
        return new BCryptPasswordEncoder(); // Algorithme BCrypt, qui chiffre les données de manière aléatoire
    }
}
